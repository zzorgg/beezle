Subject: [PATCH] WIP: Fixing firebase-google oauth
Organized the code
---
Index: app/src/main/java/com/example/beezle/duel/di/DuelModule.kt
===================================================================
diff --git a/app/src/main/java/com/example/beezle/duel/di/DuelModule.kt b/app/src/main/java/com/example/beezle/duel/di/DuelModule.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/beezle/duel/di/DuelModule.kt	(revision 7374a453856c587f41f5b04ccbb9ef8244945047)
+++ /dev/null	(revision 7374a453856c587f41f5b04ccbb9ef8244945047)
@@ -1,28 +0,0 @@
-package com.example.beezle.duel.di
-
-import com.example.beezle.duel.network.DuelWebSocketService
-import com.example.beezle.duel.repository.DuelRepository
-import dagger.Module
-import dagger.Provides
-import dagger.hilt.InstallIn
-import dagger.hilt.components.SingletonComponent
-import javax.inject.Singleton
-
-@Module
-@InstallIn(SingletonComponent::class)
-object DuelModule {
-
-    @Provides
-    @Singleton
-    fun provideDuelWebSocketService(): DuelWebSocketService {
-        return DuelWebSocketService()
-    }
-
-    @Provides
-    @Singleton
-    fun provideDuelRepository(
-        webSocketService: DuelWebSocketService
-    ): DuelRepository {
-        return DuelRepository(webSocketService)
-    }
-}
Index: app/src/main/java/com/example/beezle/test/TestComponents.kt
===================================================================
diff --git a/app/src/main/java/com/example/beezle/test/TestComponents.kt b/app/src/main/java/com/example/beezle/test/TestComponents.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/beezle/test/TestComponents.kt	(revision 7374a453856c587f41f5b04ccbb9ef8244945047)
+++ /dev/null	(revision 7374a453856c587f41f5b04ccbb9ef8244945047)
@@ -1,27 +0,0 @@
-package com.example.beezle.test
-
-import androidx.compose.foundation.layout.Box
-import androidx.compose.foundation.layout.size
-import androidx.compose.material3.Text
-import androidx.compose.runtime.Composable
-import androidx.compose.ui.Alignment
-import androidx.compose.ui.Modifier
-import androidx.compose.ui.unit.dp
-import androidx.compose.ui.unit.sp
-import com.example.beezle.onboarding.OnboardingSlide
-
-@Composable
-fun TestOnboardingSlide() {
-    OnboardingSlide(
-        title = "Test Title",
-        description = "Test Description",
-        icon = {
-            Box(
-                modifier = Modifier.size(120.dp),
-                contentAlignment = Alignment.Center
-            ) {
-                Text(text = "ðŸŽ¯", fontSize = 64.sp)
-            }
-        }
-    )
-}
Index: app/src/main/java/com/example/beezle/wallet/data/WalletDataStore.kt
===================================================================
diff --git a/app/src/main/java/com/example/beezle/wallet/data/WalletDataStore.kt b/app/src/main/java/com/example/beezle/wallet/data/WalletDataStore.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/beezle/wallet/data/WalletDataStore.kt	(revision 7374a453856c587f41f5b04ccbb9ef8244945047)
+++ /dev/null	(revision 7374a453856c587f41f5b04ccbb9ef8244945047)
@@ -1,8 +0,0 @@
-package com.example.beezle.wallet.data
-
-import android.content.Context
-import androidx.datastore.preferences.preferencesDataStore
-
-// Single source for wallet datastore
-val Context.walletDataStore by preferencesDataStore(name = "wallet_prefs")
-
Index: app/src/main/java/com/example/beezle/duel/ui/RoundResultScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/beezle/duel/ui/RoundResultScreen.kt b/app/src/main/java/com/example/beezle/ui/screens/duel/components/RoundResultScreen.kt
rename from app/src/main/java/com/example/beezle/duel/ui/RoundResultScreen.kt
rename to app/src/main/java/com/example/beezle/ui/screens/duel/components/RoundResultScreen.kt
--- a/app/src/main/java/com/example/beezle/duel/ui/RoundResultScreen.kt	(revision 7374a453856c587f41f5b04ccbb9ef8244945047)
+++ b/app/src/main/java/com/example/beezle/ui/screens/duel/components/RoundResultScreen.kt	(date 1759066213158)
@@ -1,10 +1,7 @@
-package com.example.beezle.duel.ui
+package com.example.beezle.ui.screens.duel.components
 
-import androidx.compose.animation.*
 import androidx.compose.animation.core.*
-import androidx.compose.foundation.background
 import androidx.compose.foundation.layout.*
-import androidx.compose.foundation.shape.CircleShape
 import androidx.compose.foundation.shape.RoundedCornerShape
 import androidx.compose.material.icons.Icons
 import androidx.compose.material.icons.filled.*
@@ -12,16 +9,16 @@
 import androidx.compose.runtime.*
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
-import androidx.compose.ui.draw.clip
 import androidx.compose.ui.draw.scale
 import androidx.compose.ui.graphics.Brush
 import androidx.compose.ui.graphics.Color
 import androidx.compose.ui.text.font.FontWeight
 import androidx.compose.ui.text.style.TextAlign
 import androidx.compose.ui.unit.dp
-import com.example.beezle.duel.data.DuelState
-import com.example.beezle.duel.data.WebSocketMessage
+import com.example.beezle.data.model.duel.DuelState
+import com.example.beezle.data.model.duel.WebSocketMessage
 import com.example.beezle.ui.components.GradientButton
+import kotlinx.coroutines.delay
 
 @Composable
 fun RoundResultScreen(
@@ -32,7 +29,7 @@
     val room = duelState.currentRoom
 
     LaunchedEffect(Unit) {
-        kotlinx.coroutines.delay(3000) // Auto continue after 3 seconds
+        delay(3000) // Auto continue after 3 seconds
         onContinue()
     }
 
Index: app/src/main/java/com/example/beezle/duel/ui/DuelScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/beezle/duel/ui/DuelScreen.kt b/app/src/main/java/com/example/beezle/ui/screens/duel/DuelScreen.kt
rename from app/src/main/java/com/example/beezle/duel/ui/DuelScreen.kt
rename to app/src/main/java/com/example/beezle/ui/screens/duel/DuelScreen.kt
--- a/app/src/main/java/com/example/beezle/duel/ui/DuelScreen.kt	(revision 7374a453856c587f41f5b04ccbb9ef8244945047)
+++ b/app/src/main/java/com/example/beezle/ui/screens/duel/DuelScreen.kt	(date 1759066213199)
@@ -1,11 +1,9 @@
-package com.example.beezle.duel.ui
+package com.example.beezle.ui.screens.duel
 
-import androidx.compose.animation.*
 import androidx.compose.animation.core.*
 import androidx.compose.foundation.background
 import androidx.compose.foundation.layout.*
 import androidx.compose.foundation.shape.CircleShape
-import androidx.compose.foundation.shape.RoundedCornerShape
 import androidx.compose.material.icons.Icons
 import androidx.compose.material.icons.filled.*
 import androidx.compose.material3.*
@@ -20,12 +18,13 @@
 import androidx.compose.ui.text.font.FontWeight
 import androidx.compose.ui.text.style.TextAlign
 import androidx.compose.ui.unit.dp
-import androidx.compose.ui.unit.sp
 import androidx.hilt.navigation.compose.hiltViewModel
-import com.example.beezle.duel.data.DuelState
-import com.example.beezle.duel.data.ConnectionStatus
-import com.example.beezle.duel.viewmodel.DuelViewModel
+import com.example.beezle.data.model.duel.DuelState
+import com.example.beezle.data.model.duel.ConnectionStatus
 import com.example.beezle.ui.components.GradientButton
+import com.example.beezle.ui.screens.duel.components.GameplayScreen
+import com.example.beezle.ui.screens.duel.components.PlayerCard
+import kotlinx.coroutines.delay
 
 @OptIn(ExperimentalMaterial3Api::class)
 @Composable
@@ -44,7 +43,7 @@
     // Handle errors
     duelState.error?.let { error ->
         LaunchedEffect(error) {
-            kotlinx.coroutines.delay(3000)
+            delay(3000)
             viewModel.clearError()
         }
     }
Index: app/src/main/java/com/example/beezle/duel/ui/GameplayComponents.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/beezle/duel/ui/GameplayComponents.kt b/app/src/main/java/com/example/beezle/ui/screens/duel/components/GameplayComponents.kt
rename from app/src/main/java/com/example/beezle/duel/ui/GameplayComponents.kt
rename to app/src/main/java/com/example/beezle/ui/screens/duel/components/GameplayComponents.kt
--- a/app/src/main/java/com/example/beezle/duel/ui/GameplayComponents.kt	(revision 7374a453856c587f41f5b04ccbb9ef8244945047)
+++ b/app/src/main/java/com/example/beezle/ui/screens/duel/components/GameplayComponents.kt	(date 1759066213195)
@@ -1,7 +1,5 @@
-package com.example.beezle.duel.ui
+package com.example.beezle.ui.screens.duel.components
 
-import androidx.compose.animation.*
-import androidx.compose.animation.core.*
 import androidx.compose.foundation.background
 import androidx.compose.foundation.border
 import androidx.compose.foundation.clickable
@@ -20,9 +18,8 @@
 import androidx.compose.ui.text.font.FontWeight
 import androidx.compose.ui.text.style.TextAlign
 import androidx.compose.ui.unit.dp
-import androidx.compose.ui.unit.sp
-import com.example.beezle.duel.data.DuelState
-import com.example.beezle.duel.data.Question
+import com.example.beezle.data.model.duel.DuelState
+import com.example.beezle.data.model.duel.Question
 
 @Composable
 fun GameplayScreen(
Index: app/src/main/java/com/example/beezle/duel/network/DuelWebSocketService.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/beezle/duel/network/DuelWebSocketService.kt b/app/src/main/java/com/example/beezle/data/remote/DuelWebSocketService.kt
rename from app/src/main/java/com/example/beezle/duel/network/DuelWebSocketService.kt
rename to app/src/main/java/com/example/beezle/data/remote/DuelWebSocketService.kt
--- a/app/src/main/java/com/example/beezle/duel/network/DuelWebSocketService.kt	(revision 7374a453856c587f41f5b04ccbb9ef8244945047)
+++ b/app/src/main/java/com/example/beezle/data/remote/DuelWebSocketService.kt	(date 1759066213206)
@@ -1,7 +1,7 @@
-package com.example.beezle.duel.network
+package com.example.beezle.data.remote
 
 import android.util.Log
-import com.example.beezle.duel.data.WebSocketMessage
+import com.example.beezle.data.model.duel.WebSocketMessage
 import kotlinx.coroutines.channels.Channel
 import kotlinx.coroutines.flow.Flow
 import kotlinx.coroutines.flow.MutableStateFlow
@@ -28,7 +28,7 @@
     private val _isConnected = MutableStateFlow(false)
     val isConnected: StateFlow<Boolean> = _isConnected.asStateFlow()
 
-    private val _messageChannel = Channel<WebSocketMessage>(Channel.UNLIMITED)
+    private val _messageChannel = Channel<WebSocketMessage>(Channel.Factory.UNLIMITED)
     val messages: Flow<WebSocketMessage> = _messageChannel.receiveAsFlow()
 
     private val json = Json {
@@ -158,4 +158,4 @@
         disconnect()
         connect()
     }
-}
+}
\ No newline at end of file
Index: app/src/main/java/com/example/beezle/duel/repository/DuelRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/beezle/duel/repository/DuelRepository.kt b/app/src/main/java/com/example/beezle/data/repository/DuelRepository.kt
rename from app/src/main/java/com/example/beezle/duel/repository/DuelRepository.kt
rename to app/src/main/java/com/example/beezle/data/repository/DuelRepository.kt
--- a/app/src/main/java/com/example/beezle/duel/repository/DuelRepository.kt	(revision 7374a453856c587f41f5b04ccbb9ef8244945047)
+++ b/app/src/main/java/com/example/beezle/data/repository/DuelRepository.kt	(date 1759066213141)
@@ -1,8 +1,11 @@
-package com.example.beezle.duel.repository
+package com.example.beezle.data.repository
 
 import android.util.Log
-import com.example.beezle.duel.data.*
-import com.example.beezle.duel.network.DuelWebSocketService
+import com.example.beezle.data.model.duel.ConnectionStatus
+import com.example.beezle.data.model.duel.DuelState
+import com.example.beezle.data.model.duel.DuelUser
+import com.example.beezle.data.model.duel.WebSocketMessage
+import com.example.beezle.data.remote.DuelWebSocketService
 import kotlinx.coroutines.CoroutineScope
 import kotlinx.coroutines.Dispatchers
 import kotlinx.coroutines.SupervisorJob
@@ -227,4 +230,4 @@
     fun setCurrentUser(user: DuelUser) {
         currentUser = user
     }
-}
+}
\ No newline at end of file
Index: app/src/main/java/com/example/beezle/duel/DuelsScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/beezle/duel/DuelsScreen.kt b/app/src/main/java/com/example/beezle/ui/screens/duel/components/DuelsScreen.kt
rename from app/src/main/java/com/example/beezle/duel/DuelsScreen.kt
rename to app/src/main/java/com/example/beezle/ui/screens/duel/components/DuelsScreen.kt
--- a/app/src/main/java/com/example/beezle/duel/DuelsScreen.kt	(revision 7374a453856c587f41f5b04ccbb9ef8244945047)
+++ b/app/src/main/java/com/example/beezle/ui/screens/duel/components/DuelsScreen.kt	(date 1759066077466)
@@ -1,6 +1,5 @@
-package com.example.beezle.duel
+package com.example.beezle.ui.screens.duel.components
 
-import androidx.compose.foundation.background
 import androidx.compose.foundation.layout.*
 import androidx.compose.foundation.rememberScrollState
 import androidx.compose.foundation.verticalScroll
Index: app/src/main/java/com/example/beezle/di/AppModule.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/beezle/di/AppModule.kt b/app/src/main/java/com/example/beezle/di/AppModule.kt
--- a/app/src/main/java/com/example/beezle/di/AppModule.kt	(revision 7374a453856c587f41f5b04ccbb9ef8244945047)
+++ b/app/src/main/java/com/example/beezle/di/AppModule.kt	(date 1759066077445)
@@ -5,6 +5,8 @@
 import androidx.datastore.preferences.core.Preferences
 import androidx.datastore.preferences.preferencesDataStore
 import com.example.beezle.data.local.LocalDataStoreRepository
+import com.example.beezle.data.remote.DuelWebSocketService
+import com.example.beezle.data.repository.DuelRepository
 import com.google.firebase.auth.FirebaseAuth
 import com.google.firebase.firestore.FirebaseFirestore
 import dagger.Module
@@ -37,4 +39,18 @@
     @Provides
     @Singleton
     fun provideFirestore(): FirebaseFirestore = FirebaseFirestore.getInstance()
+
+    @Provides
+    @Singleton
+    fun provideDuelWebSocketService(): DuelWebSocketService {
+        return DuelWebSocketService()
+    }
+
+    @Provides
+    @Singleton
+    fun provideDuelRepository(
+        webSocketService: DuelWebSocketService
+    ): DuelRepository {
+        return DuelRepository(webSocketService)
+    }
 }
\ No newline at end of file
Index: app/src/main/java/com/example/beezle/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/beezle/MainActivity.kt b/app/src/main/java/com/example/beezle/MainActivity.kt
--- a/app/src/main/java/com/example/beezle/MainActivity.kt	(revision 7374a453856c587f41f5b04ccbb9ef8244945047)
+++ b/app/src/main/java/com/example/beezle/MainActivity.kt	(date 1759070930831)
@@ -6,15 +6,21 @@
 import androidx.activity.enableEdgeToEdge
 import androidx.compose.runtime.collectAsState
 import androidx.compose.runtime.getValue
+import androidx.credentials.CredentialManager
 import androidx.lifecycle.viewmodel.compose.viewModel
 import androidx.navigation.compose.NavHost
 import androidx.navigation.compose.composable
 import androidx.navigation.compose.rememberNavController
-import com.example.beezle.onboarding.OnboardingScreen
-import com.example.beezle.onboarding.SplashScreen
-import com.example.beezle.onboarding.WalletScreen
-import com.example.beezle.profile.ProfileScreen
+import com.example.beezle.ui.main.MainAppScreen
+import com.example.beezle.ui.screens.duel.DuelScreen
+import com.example.beezle.ui.screens.onboarding.OnboardingScreen
+import com.example.beezle.ui.screens.onboarding.components.SplashScreen
+import com.example.beezle.ui.screens.wallet.WalletScreen
+import com.example.beezle.ui.screens.profile.ProfileScreen
 import com.example.beezle.ui.theme.BeezleTheme
+import com.google.firebase.auth.FirebaseAuth
+import com.google.firebase.auth.ktx.auth
+import com.google.firebase.ktx.Firebase
 import com.solana.mobilewalletadapter.clientlib.ActivityResultSender
 import dagger.hilt.android.AndroidEntryPoint
 
@@ -22,9 +28,16 @@
 class MainActivity : ComponentActivity() {
     private lateinit var sender: ActivityResultSender
 
+    private lateinit var auth: FirebaseAuth
+
+    private lateinit var credentialManager: CredentialManager
+
+    // Create the Credential Manager request
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
         sender = ActivityResultSender(this)
+        auth = Firebase.auth
+        credentialManager = CredentialManager.create(baseContext)
         enableEdgeToEdge()
         setContent {
             BeezleTheme {
@@ -72,10 +85,15 @@
                         MainAppScreen(sender, navController)
                     }
                     composable("profile") {
-                        ProfileScreen(navController)
+                        ProfileScreen(
+                            navController = navController,
+                            firebaseAuth = auth,
+                            credentialManager = credentialManager,
+                            baseContext = baseContext,
+                        )
                     }
                     composable("duels") {
-                        com.example.beezle.duel.ui.DuelScreen(
+                        DuelScreen(
                             onNavigateBack = {
                                 navController.popBackStack()
                             }
Index: app/src/main/java/com/example/beezle/profile/UserProfile.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/beezle/profile/UserProfile.kt b/app/src/main/java/com/example/beezle/data/model/profile/UserProfile.kt
rename from app/src/main/java/com/example/beezle/profile/UserProfile.kt
rename to app/src/main/java/com/example/beezle/data/model/profile/UserProfile.kt
--- a/app/src/main/java/com/example/beezle/profile/UserProfile.kt	(revision 7374a453856c587f41f5b04ccbb9ef8244945047)
+++ b/app/src/main/java/com/example/beezle/data/model/profile/UserProfile.kt	(date 1759066213201)
@@ -1,4 +1,4 @@
-package com.example.beezle.profile
+package com.example.beezle.data.model.profile
 
 import java.util.Date
 
Index: app/src/main/java/com/example/beezle/duel/data/DuelModels.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/beezle/duel/data/DuelModels.kt b/app/src/main/java/com/example/beezle/data/model/duel/DuelModels.kt
rename from app/src/main/java/com/example/beezle/duel/data/DuelModels.kt
rename to app/src/main/java/com/example/beezle/data/model/duel/DuelModels.kt
--- a/app/src/main/java/com/example/beezle/duel/data/DuelModels.kt	(revision 7374a453856c587f41f5b04ccbb9ef8244945047)
+++ b/app/src/main/java/com/example/beezle/data/model/duel/DuelModels.kt	(date 1759066213169)
@@ -1,4 +1,4 @@
-package com.example.beezle.duel.data
+package com.example.beezle.data.model.duel
 
 import kotlinx.serialization.Serializable
 
Index: app/src/main/java/com/example/beezle/profile/ProfileScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/beezle/profile/ProfileScreen.kt b/app/src/main/java/com/example/beezle/ui/screens/profile/ProfileScreen.kt
rename from app/src/main/java/com/example/beezle/profile/ProfileScreen.kt
rename to app/src/main/java/com/example/beezle/ui/screens/profile/ProfileScreen.kt
--- a/app/src/main/java/com/example/beezle/profile/ProfileScreen.kt	(revision 7374a453856c587f41f5b04ccbb9ef8244945047)
+++ b/app/src/main/java/com/example/beezle/ui/screens/profile/ProfileScreen.kt	(date 1759070930821)
@@ -1,10 +1,9 @@
-package com.example.beezle.profile
+package com.example.beezle.ui.screens.profile
 
+import android.content.Context
 import androidx.compose.foundation.background
 import androidx.compose.foundation.layout.*
 import androidx.compose.foundation.shape.RoundedCornerShape
-import androidx.compose.material.icons.Icons
-import androidx.compose.material.icons.filled.ArrowBack
 import androidx.compose.material.icons.filled.Edit
 import androidx.compose.material3.*
 import androidx.compose.runtime.*
@@ -18,20 +17,30 @@
 import androidx.lifecycle.compose.collectAsStateWithLifecycle
 import androidx.navigation.NavController
 import com.example.beezle.ui.theme.*
-import com.example.beezle.wallet.SolanaWalletManager
-import androidx.activity.compose.rememberLauncherForActivityResult
-import androidx.activity.result.contract.ActivityResultContracts
+import com.example.beezle.data.wallet.SolanaWalletManager
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.automirrored.filled.ArrowBack
+import androidx.compose.ui.platform.LocalContext
+import androidx.credentials.CredentialManager
+import androidx.lifecycle.viewmodel.compose.viewModel
+import com.google.firebase.auth.FirebaseAuth
+import kotlinx.coroutines.launch
 
 @OptIn(ExperimentalMaterial3Api::class)
 @Composable
-fun ProfileScreen(navController: NavController) {
-    val walletManager: SolanaWalletManager = androidx.lifecycle.viewmodel.compose.viewModel()
+fun ProfileScreen(
+    navController: NavController,
+    firebaseAuth: FirebaseAuth,
+    credentialManager: CredentialManager,
+    baseContext: Context,
+) {
+    val walletManager: SolanaWalletManager = viewModel()
     val walletState by walletManager.walletState.collectAsState()
 
     val profileViewModel: ProfileViewModel = hiltViewModel()
     val uiState by profileViewModel.uiState.collectAsStateWithLifecycle()
 
-    val authViewModel: AuthViewModel = androidx.lifecycle.viewmodel.compose.viewModel()
+    val authViewModel: AuthViewModel = viewModel()
     val authState by authViewModel.authState.collectAsState()
 
     // When auth or wallet changes, refresh profile
@@ -44,9 +53,15 @@
 
     var editing by remember { mutableStateOf(false) }
     var usernameInput by remember { mutableStateOf("") }
+    val scope = rememberCoroutineScope()
 
-    val signInLauncher = rememberLauncherForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->
-        authViewModel.handleSignInResult(result.data) {
+    val signInLauncher: () -> Unit = {
+        scope.launch {
+            authViewModel.handleSignIn(
+                firebaseAuth = firebaseAuth,
+                credentialManager = credentialManager,
+                context = baseContext,
+            )
             profileViewModel.refresh(walletState.publicKey)
         }
     }
@@ -61,7 +76,11 @@
             // Top Bar
             Row(verticalAlignment = Alignment.CenterVertically) {
                 IconButton(onClick = { navController.popBackStack() }) {
-                    Icon(Icons.Default.ArrowBack, contentDescription = "Back", tint = TextPrimary)
+                    Icon(
+                        Icons.AutoMirrored.Filled.ArrowBack,
+                        contentDescription = "Back",
+                        tint = TextPrimary
+                    )
                 }
                 Text(
                     text = "Profile",
@@ -72,8 +91,18 @@
                 Spacer(Modifier.weight(1f))
                 when (authState) {
                     is AuthUiState.SignedIn -> {
-                        TextButton(onClick = { authViewModel.signOut() }) { Text("Sign out", color = PrimaryBlue) }
+                        TextButton(onClick = {
+                            scope.launch {
+                                authViewModel.signOut(firebaseAuth, credentialManager)
+                            }
+                        }) {
+                            Text(
+                                "Sign out",
+                                color = PrimaryBlue
+                            )
+                        }
                     }
+
                     else -> {}
                 }
             }
@@ -81,25 +110,26 @@
 
             when (authState) {
                 is AuthUiState.SignedOut -> {
-                    AuthPrompt(signingIn = authState is AuthUiState.Loading, onSignIn = {
-                        val intent = authViewModel.buildSignInIntent()
-                        signInLauncher.launch(intent)
+                    AuthPrompt(signingIn = false, onSignIn = {
+                        signInLauncher()
                     })
                 }
+
                 is AuthUiState.Loading -> {
                     Box(Modifier.fillMaxWidth(), contentAlignment = Alignment.Center) {
                         CircularProgressIndicator(color = PrimaryBlue)
                     }
                 }
+
                 is AuthUiState.Error -> {
                     val msg = (authState as AuthUiState.Error).message
                     Text(msg, color = Color.Red)
                     Spacer(Modifier.height(12.dp))
                     AuthPrompt(signingIn = false, onSignIn = {
-                        val intent = authViewModel.buildSignInIntent()
-                        signInLauncher.launch(intent)
+                        signInLauncher()
                     })
                 }
+
                 is AuthUiState.SignedIn -> {
                     // Show profile states
                     when (uiState) {
@@ -108,14 +138,17 @@
                                 CircularProgressIndicator(color = PrimaryBlue)
                             }
                         }
+
                         is ProfileUiState.Error -> {
                             val msg = (uiState as ProfileUiState.Error).message
                             Text(msg, color = Color.Red)
                         }
+
                         ProfileUiState.SignedOut -> {
                             // Should not happen because auth is signed in
                             Text("Signed out", color = TextSecondary)
                         }
+
                         is ProfileUiState.Loaded -> {
                             val profile = (uiState as ProfileUiState.Loaded).profile
                             Card(
@@ -124,27 +157,47 @@
                             ) {
                                 Column(Modifier.padding(16.dp)) {
                                     Text("Firebase UID", color = TextSecondary, fontSize = 12.sp)
-                                    Text(profile.uid.take(8) + "...", color = TextPrimary, fontSize = 14.sp)
+                                    Text(
+                                        profile.uid.take(8) + "...",
+                                        color = TextPrimary,
+                                        fontSize = 14.sp
+                                    )
                                     Spacer(Modifier.height(12.dp))
 
                                     // Wallet linking section
                                     Text("Wallet", color = TextSecondary, fontSize = 12.sp)
                                     if (profile.walletPublicKey != null) {
-                                        Text(profile.walletPublicKey.take(8) + "..." + profile.walletPublicKey.takeLast(8), color = TextPrimary, fontSize = 14.sp)
+                                        Text(
+                                            profile.walletPublicKey.take(8) + "..." + profile.walletPublicKey.takeLast(
+                                                8
+                                            ), color = TextPrimary, fontSize = 14.sp
+                                        )
                                     } else {
                                         if (walletState.isConnected && !walletState.publicKey.isNullOrBlank()) {
-                                            Button(onClick = { profileViewModel.linkWallet(walletState.publicKey!!) }) {
+                                            Button(onClick = {
+                                                profileViewModel.linkWallet(
+                                                    walletState.publicKey!!
+                                                )
+                                            }) {
                                                 Text("Link Connected Wallet")
                                             }
                                         } else {
-                                            Text("No wallet linked", color = TextSecondary, fontSize = 14.sp)
+                                            Text(
+                                                "No wallet linked",
+                                                color = TextSecondary,
+                                                fontSize = 14.sp
+                                            )
                                         }
                                     }
                                     Spacer(Modifier.height(12.dp))
 
                                     Row(verticalAlignment = Alignment.CenterVertically) {
                                         Column(Modifier.weight(1f)) {
-                                            Text("Username", color = TextSecondary, fontSize = 12.sp)
+                                            Text(
+                                                "Username",
+                                                color = TextSecondary,
+                                                fontSize = 12.sp
+                                            )
                                             if (editing) {
                                                 OutlinedTextField(
                                                     value = usernameInput,
@@ -153,7 +206,12 @@
                                                     modifier = Modifier.fillMaxWidth()
                                                 )
                                             } else {
-                                                Text(profile.username ?: "Not set", color = TextPrimary, fontSize = 18.sp, fontWeight = FontWeight.SemiBold)
+                                                Text(
+                                                    profile.username ?: "Not set",
+                                                    color = TextPrimary,
+                                                    fontSize = 18.sp,
+                                                    fontWeight = FontWeight.SemiBold
+                                                )
                                             }
                                         }
                                         IconButton(onClick = {
@@ -166,7 +224,11 @@
                                             }
                                             editing = !editing
                                         }) {
-                                            Icon(Icons.Default.Edit, contentDescription = null, tint = PrimaryBlue)
+                                            Icon(
+                                                Icons.Default.Edit,
+                                                contentDescription = null,
+                                                tint = PrimaryBlue
+                                            )
                                         }
                                     }
                                     Spacer(Modifier.height(12.dp))
@@ -188,7 +250,11 @@
             }
 
             Spacer(Modifier.height(24.dp))
-            Text("Coming soon: on-chain duel history & escrow settlement.", color = TextTertiary, fontSize = 12.sp)
+            Text(
+                "Coming soon: on-chain duel history & escrow settlement.",
+                color = TextTertiary,
+                fontSize = 12.sp
+            )
         }
     }
 }
@@ -196,11 +262,20 @@
 @Composable
 private fun AuthPrompt(signingIn: Boolean, onSignIn: () -> Unit) {
     Column(horizontalAlignment = Alignment.CenterHorizontally, modifier = Modifier.fillMaxWidth()) {
-        Text("Sign in to create your profile", color = TextPrimary, fontSize = 18.sp, fontWeight = FontWeight.SemiBold)
+        Text(
+            "Sign in to create your profile",
+            color = TextPrimary,
+            fontSize = 18.sp,
+            fontWeight = FontWeight.SemiBold
+        )
         Spacer(Modifier.height(12.dp))
         Button(onClick = onSignIn, enabled = !signingIn) {
             if (signingIn) {
-                CircularProgressIndicator(modifier = Modifier.size(18.dp), strokeWidth = 2.dp, color = Color.White)
+                CircularProgressIndicator(
+                    modifier = Modifier.size(18.dp),
+                    strokeWidth = 2.dp,
+                    color = Color.White
+                )
                 Spacer(Modifier.width(8.dp))
             }
             Text(if (signingIn) "Signing in..." else "Sign in with Google")
Index: app/build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle.kts b/app/build.gradle.kts
--- a/app/build.gradle.kts	(revision 7374a453856c587f41f5b04ccbb9ef8244945047)
+++ b/app/build.gradle.kts	(date 1759067719482)
@@ -122,13 +122,18 @@
     implementation("com.google.firebase:firebase-auth-ktx")
     implementation("com.google.firebase:firebase-firestore-ktx") {
         exclude(group = "com.google.firebase", module = "protolite-well-known-types")
-    } // now using BOM version
-    implementation("com.google.android.gms:play-services-auth:21.2.0") // Google Sign-In
+    }
+    // Also add the dependencies for the Credential Manager libraries and specify their versions
+    implementation("androidx.credentials:credentials:1.5.0")
+    implementation("androidx.credentials:credentials-play-services-auth:1.5.0")
+    implementation("com.google.android.libraries.identity.googleid:googleid:1.1.1")
 
     implementation("com.google.dagger:hilt-android:2.57.2")
     ksp("com.google.dagger:hilt-android-compiler:2.57.2")
 
     // Explicit protobuf runtime & common lite protos (provides google.type.LatLng) after excluding protolite
     implementation("com.google.protobuf:protobuf-javalite:4.29.3")
-    implementation("com.google.api.grpc:proto-google-common-protos:2.17.0")
+    implementation("com.google.api.grpc:proto-google-common-protos:2.17.0") {
+        exclude(group = "com.google.protobuf", module = "protobuf-java")
+    }
 }
Index: app/src/main/java/com/example/beezle/profile/ProfileViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/beezle/profile/ProfileViewModel.kt b/app/src/main/java/com/example/beezle/ui/screens/profile/ProfileViewModel.kt
rename from app/src/main/java/com/example/beezle/profile/ProfileViewModel.kt
rename to app/src/main/java/com/example/beezle/ui/screens/profile/ProfileViewModel.kt
--- a/app/src/main/java/com/example/beezle/profile/ProfileViewModel.kt	(revision 7374a453856c587f41f5b04ccbb9ef8244945047)
+++ b/app/src/main/java/com/example/beezle/ui/screens/profile/ProfileViewModel.kt	(date 1759066563606)
@@ -1,7 +1,9 @@
-package com.example.beezle.profile
+package com.example.beezle.ui.screens.profile
 
 import androidx.lifecycle.ViewModel
 import androidx.lifecycle.viewModelScope
+import com.example.beezle.data.model.profile.UserProfile
+import com.example.beezle.data.repository.UserProfileRepository
 import com.google.firebase.auth.FirebaseAuth
 import dagger.hilt.android.lifecycle.HiltViewModel
 import kotlinx.coroutines.flow.MutableStateFlow
Index: app/src/main/java/com/example/beezle/onboarding/SplashScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/beezle/onboarding/SplashScreen.kt b/app/src/main/java/com/example/beezle/ui/screens/onboarding/components/SplashScreen.kt
rename from app/src/main/java/com/example/beezle/onboarding/SplashScreen.kt
rename to app/src/main/java/com/example/beezle/ui/screens/onboarding/components/SplashScreen.kt
--- a/app/src/main/java/com/example/beezle/onboarding/SplashScreen.kt	(revision 7374a453856c587f41f5b04ccbb9ef8244945047)
+++ b/app/src/main/java/com/example/beezle/ui/screens/onboarding/components/SplashScreen.kt	(date 1759066077460)
@@ -1,4 +1,4 @@
-package com.example.beezle.onboarding
+package com.example.beezle.ui.screens.onboarding.components
 
 import androidx.compose.foundation.background
 import androidx.compose.foundation.layout.*
Index: app/src/main/java/com/example/beezle/onboarding/OnboardingScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/beezle/onboarding/OnboardingScreen.kt b/app/src/main/java/com/example/beezle/ui/screens/onboarding/OnboardingScreen.kt
rename from app/src/main/java/com/example/beezle/onboarding/OnboardingScreen.kt
rename to app/src/main/java/com/example/beezle/ui/screens/onboarding/OnboardingScreen.kt
--- a/app/src/main/java/com/example/beezle/onboarding/OnboardingScreen.kt	(revision 7374a453856c587f41f5b04ccbb9ef8244945047)
+++ b/app/src/main/java/com/example/beezle/ui/screens/onboarding/OnboardingScreen.kt	(date 1759066077455)
@@ -1,4 +1,4 @@
-package com.example.beezle.onboarding
+package com.example.beezle.ui.screens.onboarding
 
 import androidx.compose.animation.core.*
 import androidx.compose.foundation.ExperimentalFoundationApi
@@ -7,10 +7,13 @@
 import androidx.compose.foundation.pager.HorizontalPager
 import androidx.compose.foundation.pager.rememberPagerState
 import androidx.compose.foundation.shape.CircleShape
+import androidx.compose.foundation.shape.RoundedCornerShape
 import androidx.compose.material.icons.Icons
 import androidx.compose.material.icons.automirrored.filled.ArrowForward
 import androidx.compose.material3.MaterialTheme
 import androidx.compose.material3.Surface
+import androidx.compose.material3.Text
+import androidx.compose.material3.TextButton
 import androidx.compose.runtime.*
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
@@ -19,6 +22,7 @@
 import androidx.compose.ui.unit.dp
 import androidx.compose.ui.unit.sp
 import com.example.beezle.ui.components.GradientButton
+import com.example.beezle.ui.screens.onboarding.components.OnboardingSlide
 import com.example.beezle.ui.theme.*
 import kotlinx.coroutines.launch
 
@@ -78,7 +82,7 @@
                                     ),
                                 contentAlignment = Alignment.Center
                             ) {
-                                androidx.compose.material3.Text(
+                                Text(
                                     text = when (page) {
                                         0 -> "âš¡"
                                         1 -> "ðŸŽ¯"
@@ -108,7 +112,7 @@
                                 )
                                 .background(
                                     color = if (index == pagerState.currentPage) PrimaryBlue else TextTertiary,
-                                    shape = androidx.compose.foundation.shape.RoundedCornerShape(4.dp)
+                                    shape = RoundedCornerShape(4.dp)
                                 )
                         )
                     }
@@ -128,11 +132,11 @@
                 ) {
                     if (pagerState.currentPage < 2) {
                         // Skip Button
-                        androidx.compose.material3.TextButton(
+                        TextButton(
                             onClick = onGetStarted,
                             modifier = Modifier.padding(vertical = 8.dp)
                         ) {
-                            androidx.compose.material3.Text(
+                            Text(
                                 text = "Skip",
                                 color = TextSecondary,
                                 style = MaterialTheme.typography.bodyLarge
Index: app/src/main/java/com/example/beezle/MainAppScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/beezle/MainAppScreen.kt b/app/src/main/java/com/example/beezle/ui/main/MainAppScreen.kt
rename from app/src/main/java/com/example/beezle/MainAppScreen.kt
rename to app/src/main/java/com/example/beezle/ui/main/MainAppScreen.kt
--- a/app/src/main/java/com/example/beezle/MainAppScreen.kt	(revision 7374a453856c587f41f5b04ccbb9ef8244945047)
+++ b/app/src/main/java/com/example/beezle/ui/main/MainAppScreen.kt	(date 1759066405514)
@@ -1,4 +1,4 @@
-package com.example.beezle
+package com.example.beezle.ui.main
 
 import androidx.compose.foundation.background
 import androidx.compose.foundation.clickable
@@ -38,7 +38,7 @@
 import com.example.beezle.ui.theme.SurfaceDark
 import com.example.beezle.ui.theme.TextPrimary
 import com.example.beezle.ui.theme.TextSecondary
-import com.example.beezle.wallet.SolanaWalletManager
+import com.example.beezle.data.wallet.SolanaWalletManager
 import androidx.lifecycle.viewmodel.compose.viewModel
 import com.solana.mobilewalletadapter.clientlib.ActivityResultSender
 
Index: app/src/main/java/com/example/beezle/onboarding/WalletScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/beezle/onboarding/WalletScreen.kt b/app/src/main/java/com/example/beezle/ui/screens/wallet/WalletScreen.kt
rename from app/src/main/java/com/example/beezle/onboarding/WalletScreen.kt
rename to app/src/main/java/com/example/beezle/ui/screens/wallet/WalletScreen.kt
--- a/app/src/main/java/com/example/beezle/onboarding/WalletScreen.kt	(revision 7374a453856c587f41f5b04ccbb9ef8244945047)
+++ b/app/src/main/java/com/example/beezle/ui/screens/wallet/WalletScreen.kt	(date 1759066405519)
@@ -1,4 +1,4 @@
-package com.example.beezle.onboarding
+package com.example.beezle.ui.screens.wallet
 
 import androidx.compose.animation.core.*
 import androidx.compose.foundation.background
@@ -6,7 +6,6 @@
 import androidx.compose.foundation.shape.RoundedCornerShape
 import androidx.compose.material.icons.Icons
 import androidx.compose.material.icons.filled.AccountBalanceWallet
-import androidx.compose.material.icons.filled.Add
 import androidx.compose.material.icons.filled.Security
 import androidx.compose.material.icons.filled.CheckCircle
 import androidx.compose.material.icons.filled.Error
@@ -24,8 +23,8 @@
 import com.example.beezle.ui.components.GradientButton
 import com.example.beezle.ui.components.ModernCard
 import com.example.beezle.ui.theme.*
-import com.example.beezle.wallet.SolanaWalletManager
-import androidx.activity.ComponentActivity
+import androidx.compose.ui.graphics.Color
+import com.example.beezle.data.wallet.SolanaWalletManager
 import com.solana.mobilewalletadapter.clientlib.ActivityResultSender
 
 @Composable
@@ -85,7 +84,7 @@
                         Icon(
                             imageVector = if (walletState.isConnected) Icons.Default.CheckCircle else Icons.Default.AccountBalanceWallet,
                             contentDescription = null,
-                            tint = androidx.compose.ui.graphics.Color.White,
+                            tint = Color.White,
                             modifier = Modifier.size(40.dp)
                         )
                     }
@@ -267,13 +266,13 @@
                             Icon(
                                 imageVector = Icons.Default.Error,
                                 contentDescription = null,
-                                tint = androidx.compose.ui.graphics.Color.Red,
+                                tint = Color.Red,
                                 modifier = Modifier.size(20.dp)
                             )
                             Spacer(modifier = Modifier.width(12.dp))
                             Text(
                                 text = error,
-                                color = androidx.compose.ui.graphics.Color.Red,
+                                color = Color.Red,
                                 fontSize = 14.sp,
                                 modifier = Modifier.weight(1f)
                             )
@@ -374,7 +373,7 @@
                 Box(
                     modifier = Modifier
                         .fillMaxSize()
-                        .background(androidx.compose.ui.graphics.Color.Black.copy(alpha = 0.5f)),
+                        .background(Color.Black.copy(alpha = 0.5f)),
                     contentAlignment = Alignment.Center
                 ) {
                     CircularProgressIndicator(
Index: app/src/main/java/com/example/beezle/onboarding/OnboardingSlide.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/beezle/onboarding/OnboardingSlide.kt b/app/src/main/java/com/example/beezle/ui/screens/onboarding/components/OnboardingSlide.kt
rename from app/src/main/java/com/example/beezle/onboarding/OnboardingSlide.kt
rename to app/src/main/java/com/example/beezle/ui/screens/onboarding/components/OnboardingSlide.kt
--- a/app/src/main/java/com/example/beezle/onboarding/OnboardingSlide.kt	(revision 7374a453856c587f41f5b04ccbb9ef8244945047)
+++ b/app/src/main/java/com/example/beezle/ui/screens/onboarding/components/OnboardingSlide.kt	(date 1759066077457)
@@ -1,4 +1,4 @@
-package com.example.beezle.onboarding
+package com.example.beezle.ui.screens.onboarding.components
 
 import androidx.compose.animation.core.*
 import androidx.compose.foundation.layout.*
Index: app/src/main/java/com/example/beezle/profile/AuthViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/beezle/profile/AuthViewModel.kt b/app/src/main/java/com/example/beezle/ui/screens/profile/AuthViewModel.kt
rename from app/src/main/java/com/example/beezle/profile/AuthViewModel.kt
rename to app/src/main/java/com/example/beezle/ui/screens/profile/AuthViewModel.kt
--- a/app/src/main/java/com/example/beezle/profile/AuthViewModel.kt	(revision 7374a453856c587f41f5b04ccbb9ef8244945047)
+++ b/app/src/main/java/com/example/beezle/ui/screens/profile/AuthViewModel.kt	(date 1759071318201)
@@ -1,22 +1,32 @@
-package com.example.beezle.profile
+package com.example.beezle.ui.screens.profile
 
+import android.app.Activity
 import android.app.Application
-import android.content.Intent
+import android.content.Context
+import android.os.Build
+import android.util.Log
+import androidx.annotation.RequiresApi
+import androidx.credentials.ClearCredentialStateRequest
+import androidx.credentials.CredentialManager
+import androidx.credentials.CustomCredential
+import androidx.credentials.GetCredentialRequest
+import androidx.credentials.exceptions.ClearCredentialException
 import androidx.lifecycle.AndroidViewModel
 import androidx.lifecycle.viewModelScope
 import com.example.beezle.R
-import com.google.android.gms.auth.api.signin.GoogleSignIn
-import com.google.android.gms.auth.api.signin.GoogleSignInAccount
-import com.google.android.gms.auth.api.signin.GoogleSignInClient
-import com.google.android.gms.auth.api.signin.GoogleSignInOptions
-import com.google.android.gms.common.api.ApiException
+import com.google.android.libraries.identity.googleid.GetGoogleIdOption
+import com.google.android.libraries.identity.googleid.GoogleIdTokenCredential
+import com.google.android.libraries.identity.googleid.GoogleIdTokenCredential.Companion.TYPE_GOOGLE_ID_TOKEN_CREDENTIAL
 import com.google.firebase.auth.FirebaseAuth
 import com.google.firebase.auth.GoogleAuthProvider
 import kotlinx.coroutines.flow.MutableStateFlow
 import kotlinx.coroutines.flow.StateFlow
 import kotlinx.coroutines.flow.asStateFlow
+import kotlinx.coroutines.flow.update
 import kotlinx.coroutines.launch
 
+private const val TAG = "AuthViewModel"
+
 sealed interface AuthUiState {
     object SignedOut : AuthUiState
     object Loading : AuthUiState
@@ -25,81 +35,107 @@
 }
 
 class AuthViewModel(application: Application) : AndroidViewModel(application) {
-    private val auth: FirebaseAuth = FirebaseAuth.getInstance()
-
     private val _authState = MutableStateFlow<AuthUiState>(AuthUiState.SignedOut)
     val authState: StateFlow<AuthUiState> = _authState.asStateFlow()
 
-    private var googleClient: GoogleSignInClient? = null
+    // Instantiate a Google sign-in request
+
+//    init {
+//        auth.currentUser?.let { user ->
+//            _authState.value = AuthUiState.SignedIn(user.uid, user.email, user.displayName)
+//        }
+//    }
 
-    init {
-        auth.currentUser?.let { user ->
-            _authState.value = AuthUiState.SignedIn(user.uid, user.email, user.displayName)
-        }
-    }
 
-    private fun ensureClient(): GoogleSignInClient {
-        val ctx = getApplication<Application>()
-        if (googleClient == null) {
-            val webClientId = ctx.getString(R.string.default_web_client_id)
-            val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
-                .requestEmail()
-                .requestIdToken(webClientId)
+    suspend fun handleSignIn(
+        firebaseAuth: FirebaseAuth,
+        credentialManager: CredentialManager,
+        context: Context
+    ) {
+        try {
+            // Instantiate a Google sign-in request
+            Log.d("AuthViewModel", "Handling sign in result...")
+            val googleIdOption = GetGoogleIdOption.Builder()
+                // Your server's client ID, not your Android client ID.
+                .setServerClientId(context.getString(R.string.default_web_client_id))
+                // Only show accounts previously used to sign in.
+//                .setFilterByAuthorizedAccounts(true)
+                .build()
+
+            Log.d(TAG, "Handling sign result...")
+            // Create the Credential Manager request
+            val request = GetCredentialRequest.Builder()
+                .addCredentialOption(googleIdOption)
                 .build()
-            googleClient = GoogleSignIn.getClient(ctx, gso)
-        }
-        return googleClient!!
-    }
+
+            Log.d(TAG, "Handling sign ...")
+            val result = credentialManager.getCredential(
+                context,
+                request
+            )
+            val credential = result.credential
+
+            Log.d(TAG, "sign ...")
+            if (credential is CustomCredential && credential.type == TYPE_GOOGLE_ID_TOKEN_CREDENTIAL) {
+                // Create Google ID Token
+                val googleIdTokenCredential = GoogleIdTokenCredential.createFrom(credential.data)
 
-    fun buildSignInIntent(): Intent {
-        _authState.value = AuthUiState.Loading
-        return ensureClient().signInIntent
-    }
-
-    fun handleSignInResult(data: Intent?, onCredentialFinished: (() -> Unit)? = null) {
-        viewModelScope.launch {
-            try {
-                val task = GoogleSignIn.getSignedInAccountFromIntent(data)
-                val account: GoogleSignInAccount = task.getResult(ApiException::class.java)
-                firebaseAuthWithGoogle(account, onCredentialFinished)
-            } catch (e: Exception) {
-                _authState.value = AuthUiState.Error(e.localizedMessage ?: "Google sign-in failed")
+                // Sign in to Firebase with using the token
+                firebaseAuthWithGoogle(firebaseAuth, context, googleIdTokenCredential.idToken)
+            } else {
+                throw IllegalArgumentException("Credential is not of type Google ID!")
+            }
+            Log.d("AuthViewModel", "Data handled")
+        } catch (e: Exception) {
+            e.printStackTrace()
+            Log.d(
+                "AuthViewModel",
+                "Error handling data ${e}\n${e.cause}\n${e.stackTrace.toString()}\n ${e.message}"
+            )
+            _authState.update {
+                AuthUiState.Error(e.localizedMessage ?: "Google sign-in failed")
             }
         }
     }
 
-    private fun firebaseAuthWithGoogle(acct: GoogleSignInAccount, onCredentialFinished: (() -> Unit)?) {
+    suspend fun signOut(auth: FirebaseAuth, credentialManager: CredentialManager) {
+        // Firebase sign out
+        auth.signOut()
+
+        // When a user signs out, clear the current user credential state from all credential providers.
         viewModelScope.launch {
             try {
-                _authState.value = AuthUiState.Loading
-                val credential = GoogleAuthProvider.getCredential(acct.idToken, null)
-                auth.signInWithCredential(credential).addOnCompleteListener { task ->
-                    if (task.isSuccessful) {
-                        val user = auth.currentUser
-                        if (user != null) {
-                            _authState.value = AuthUiState.SignedIn(user.uid, user.email, user.displayName)
-                        } else {
-                            _authState.value = AuthUiState.Error("User is null after sign-in")
+                val clearRequest = ClearCredentialStateRequest()
+                credentialManager.clearCredentialState(clearRequest)
+                _authState.update { AuthUiState.SignedOut }
+            } catch (e: ClearCredentialException) {
+                Log.e(TAG, "Couldn't clear user credentials: ${e.localizedMessage}")
+            }
+        }
+    }
+
+    private fun firebaseAuthWithGoogle(auth: FirebaseAuth, context: Context, idToken: String) {
+        val credential = GoogleAuthProvider.getCredential(idToken, null)
+        auth.signInWithCredential(credential)
+            .addOnCompleteListener(context.mainExecutor) { task ->
+                if (task.isSuccessful) {
+                    // Sign in success, update UI with the signed-in user's information
+                    Log.d(TAG, "signInWithCredential:success")
+                    auth.currentUser?.let { user ->
+                        _authState.update {
+                            AuthUiState.SignedIn(
+                                uid = user.uid,
+                                email = user.email,
+                                displayName = user.displayName
+                            )
                         }
-                        onCredentialFinished?.invoke()
-                    } else {
-                        _authState.value = AuthUiState.Error(task.exception?.localizedMessage ?: "Auth failed")
-                    }
+                    }
+                } else {
+                    // If sign in fails, display a message to the user
+                    Log.w(TAG, "signInWithCredential:failure", task.exception)
+                    _authState.update { AuthUiState.SignedOut }
                 }
-            } catch (e: Exception) {
-                _authState.value = AuthUiState.Error(e.localizedMessage ?: "Auth exception")
             }
-        }
     }
-
-    fun signOut() {
-        viewModelScope.launch {
-            try {
-                ensureClient().signOut()
-                auth.signOut()
-            } catch (_: Exception) { }
-            _authState.value = AuthUiState.SignedOut
-        }
-    }
 }
 
Index: app/src/main/java/com/example/beezle/duel/viewmodel/DuelViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/beezle/duel/viewmodel/DuelViewModel.kt b/app/src/main/java/com/example/beezle/ui/screens/duel/DuelViewModel.kt
rename from app/src/main/java/com/example/beezle/duel/viewmodel/DuelViewModel.kt
rename to app/src/main/java/com/example/beezle/ui/screens/duel/DuelViewModel.kt
--- a/app/src/main/java/com/example/beezle/duel/viewmodel/DuelViewModel.kt	(revision 7374a453856c587f41f5b04ccbb9ef8244945047)
+++ b/app/src/main/java/com/example/beezle/ui/screens/duel/DuelViewModel.kt	(date 1759066213153)
@@ -1,14 +1,16 @@
-package com.example.beezle.duel.viewmodel
+package com.example.beezle.ui.screens.duel
 
 import androidx.lifecycle.ViewModel
 import androidx.lifecycle.viewModelScope
-import com.example.beezle.duel.data.DuelState
-import com.example.beezle.duel.data.DuelUser
-import com.example.beezle.duel.repository.DuelRepository
+import com.example.beezle.data.model.duel.DuelState
+import com.example.beezle.data.model.duel.DuelUser
+import com.example.beezle.data.repository.DuelRepository
 import dagger.hilt.android.lifecycle.HiltViewModel
+import kotlinx.coroutines.delay
 import kotlinx.coroutines.flow.StateFlow
 import kotlinx.coroutines.launch
 import javax.inject.Inject
+import kotlin.random.Random
 
 @HiltViewModel
 class DuelViewModel @Inject constructor(
@@ -41,7 +43,7 @@
 
         viewModelScope.launch {
             // Wait a bit for connection if needed
-            kotlinx.coroutines.delay(1000)
+            delay(1000)
             duelRepository.joinQueue(user)
         }
     }
@@ -69,11 +71,11 @@
     }
 
     private fun generateUserId(): String {
-        return "user_${System.currentTimeMillis()}_${kotlin.random.Random.nextInt(1000, 9999)}"
+        return "user_${System.currentTimeMillis()}_${Random.Default.nextInt(1000, 9999)}"
     }
 
     override fun onCleared() {
         super.onCleared()
         disconnect()
     }
-}
+}
\ No newline at end of file
Index: app/src/main/java/com/example/beezle/wallet/SolanaWalletManager.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/beezle/wallet/SolanaWalletManager.kt b/app/src/main/java/com/example/beezle/data/wallet/SolanaWalletManager.kt
rename from app/src/main/java/com/example/beezle/wallet/SolanaWalletManager.kt
rename to app/src/main/java/com/example/beezle/data/wallet/SolanaWalletManager.kt
--- a/app/src/main/java/com/example/beezle/wallet/SolanaWalletManager.kt	(revision 7374a453856c587f41f5b04ccbb9ef8244945047)
+++ b/app/src/main/java/com/example/beezle/data/wallet/SolanaWalletManager.kt	(date 1759066641628)
@@ -1,10 +1,9 @@
-package com.example.beezle.wallet
+package com.example.beezle.data.wallet
 
 import android.app.Application
 import android.content.Context
 import android.net.Uri
 import android.util.Log
-import androidx.datastore.preferences.core.Preferences
 import androidx.datastore.preferences.core.booleanPreferencesKey
 import androidx.datastore.preferences.core.edit
 import androidx.datastore.preferences.core.stringPreferencesKey
@@ -19,6 +18,7 @@
 import kotlinx.coroutines.flow.first
 import kotlinx.coroutines.launch
 import com.example.beezle.R
+import androidx.core.net.toUri
 
 // DataStore delegate at file level
 private val Context.walletDataStore by preferencesDataStore(name = "wallet_prefs")
@@ -151,7 +151,7 @@
 
     private fun initializeWalletAdapter() {
         try {
-            val solanaUri = Uri.parse("https://solana.com")
+            val solanaUri = "https://solana.com".toUri()
             val app = getApplication<Application>()
             val res = app.resources
             val iconResId = R.mipmap.ic_launcher
@@ -159,11 +159,11 @@
                 val type = res.getResourceTypeName(iconResId)
                 val name = res.getResourceEntryName(iconResId)
                 // /<type>/<name>
-                Uri.parse("/$type/$name")
+                "/$type/$name".toUri()
             } catch (e: Exception) {
                 Log.w(TAG, "Failed to build android.resource icon URI, falling back to resource ID format", e)
                 // Fallback: use resource ID format which is also relative
-                Uri.parse("/${iconResId}")
+                "/${iconResId}".toUri()
             }
             Log.d(TAG, "Built icon URI: $iconUri (scheme: ${iconUri.scheme}, isAbsolute: ${iconUri.isAbsolute})")
 
Index: app/src/main/java/com/example/beezle/profile/UserProfileRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/beezle/profile/UserProfileRepository.kt b/app/src/main/java/com/example/beezle/data/repository/UserProfileRepository.kt
rename from app/src/main/java/com/example/beezle/profile/UserProfileRepository.kt
rename to app/src/main/java/com/example/beezle/data/repository/UserProfileRepository.kt
--- a/app/src/main/java/com/example/beezle/profile/UserProfileRepository.kt	(revision 7374a453856c587f41f5b04ccbb9ef8244945047)
+++ b/app/src/main/java/com/example/beezle/data/repository/UserProfileRepository.kt	(date 1759066563621)
@@ -1,5 +1,6 @@
-package com.example.beezle.profile
+package com.example.beezle.data.repository
 
+import com.example.beezle.data.model.profile.UserProfile
 import com.google.firebase.auth.FirebaseAuth
 import com.google.firebase.firestore.FieldValue
 import com.google.firebase.firestore.FirebaseFirestore
@@ -50,5 +51,4 @@
         val updates = if (won) mapOf("duelStats.wins" to FieldValue.increment(1)) else mapOf("duelStats.losses" to FieldValue.increment(1))
         collection.document(uid).update(updates).await()
     }
-}
-
+}
\ No newline at end of file
